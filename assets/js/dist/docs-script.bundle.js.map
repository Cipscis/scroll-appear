{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/scroll-appear/./node_modules/@cipscis/throttle/dist/throttle.js","webpack://@cipscis/scroll-appear/./node_modules/@cipscis/debounce/dist/debounce.js","webpack://@cipscis/scroll-appear/./src/eventListenerPassiveSupport.ts","webpack://@cipscis/scroll-appear/./src/domMap.ts","webpack://@cipscis/scroll-appear/./src/ScrollAppearState.ts","webpack://@cipscis/scroll-appear/./src/ScrollAppearQueue.ts","webpack://@cipscis/scroll-appear/./src/queues.ts","webpack://@cipscis/scroll-appear/./src/ScrollAppearItem.ts","webpack://@cipscis/scroll-appear/./src/scroll-appear.ts","webpack://@cipscis/scroll-appear/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/**\r\n * Create a version of fn that will only execute if it\r\n * hasn't been called successfully within the last delay ms\r\n *\r\n * @param {Function} fn - A function to throttle\r\n * @param {number} delay - The duration to wait before the function can be called again (ms)\r\n */\r\nconst throttle = function (fn, delay) {\r\n    // Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\r\n    let timeout;\r\n    return function (...args) {\r\n        if (!timeout) {\r\n            const returnVal = fn.apply(this, args);\r\n            timeout = setTimeout(() => {\r\n                timeout = undefined;\r\n            }, delay);\r\n            return returnVal;\r\n        }\r\n    };\r\n};\r\nexport { throttle };\r\nexport default throttle;\r\n//# sourceMappingURL=throttle.js.map","/**\r\n * Create a version of fn that will execute only after\r\n * no attempt to call it has been made for delay ms.\r\n * The debounced function returns a Promise that\r\n * resolves to the value returned by fn.\r\n *\r\n * Note that this will uncouple the callback from user\r\n * input, if used as an event callback. This can cause\r\n * browsers to attempt to block certain behaviour.\r\n *\r\n * This throttling is useful, for example, for waiting until\r\n * the user has stopped typing before executing a keyup callback.\r\n *\r\n * @param {Function} fn - A function to debounce\r\n * @param {number} delay - The duration to wait before calling the function (ms)\r\n */\r\nconst debounce = function (fn, delay) {\r\n    // Keep track of the timeout, Promise, and the Promise's resolver across multiple calls\r\n    // This lets later calls in the same queue know about the previous call,\r\n    // to cancel its timeout and use the same promise and resolution\r\n    // Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\r\n    let timeout;\r\n    let promise;\r\n    let res;\r\n    return function (...args) {\r\n        const scheduleResolution = (resolve) => {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n            timeout = setTimeout(() => {\r\n                timeout = undefined;\r\n                promise = undefined;\r\n                res = undefined;\r\n                resolve(fn.apply(this, args));\r\n            }, delay);\r\n        };\r\n        if (res) {\r\n            scheduleResolution(res);\r\n        }\r\n        else {\r\n            promise = new Promise((resolve, reject) => {\r\n                res = resolve;\r\n                scheduleResolution(res);\r\n            });\r\n        }\r\n        // There is no type guard for promise on the `if (res)` path,\r\n        // but if res is not undefined, then neither is promise\r\n        return promise;\r\n    };\r\n};\r\nexport { debounce };\r\nexport default debounce;\r\n//# sourceMappingURL=debounce.js.map","/**\n * Some older browsers don't support passing an options object to `addEventListener`,\n * instead expecting a booolean value to tell them if the event is passive. To detect\n * how the current browser expects to tell if an event is passive, temporarily bind\n * a dummy event that passes an object with a getter in its `passive` property so we\n * can detect if the browser tried to access it.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#safely_detecting_option_support\n */\nlet passiveSupported = false;\ntry {\n\tconst options = {\n\t\tget passive() {\n\t\t\tpassiveSupported = true;\n\t\t\treturn false;\n\t\t},\n\t} as EventListenerOptions;\n\n\tconst noop = () => {};\n\n\twindow.addEventListener('test', noop, options);\n\twindow.removeEventListener('test', noop);\n} catch (e) {\n\tpassiveSupported = false;\n}\n\nexport default passiveSupported;\n","// These objects contain constants used to map information\n// between the DOM and our model.\n\nexport const selectors = {\n\titem: '.js-scroll-appear',\n\tcontainer: '.js-scroll-appear__container',\n} as const;\n\nexport const attributes = {\n\tstate: 'data-scroll-appear-state',\n\tdelay: 'data-scroll-appear-delay',\n\tqueue: 'data-scroll-appear-queue',\n} as const;\n","export enum ScrollAppearState {\n\tUNINITIALISED = 'uninitialised',\n\tHIDDEN = 'hidden',\n\tVISIBLE = 'visible'\n}\n\nexport function isScrollAppearState(val: unknown): val is ScrollAppearState {\n\tconst states = Object.values(ScrollAppearState);\n\n\t// Use `as unknown[]` so TypeScript doesn't complain about using\n\t// `Array.prototype.includes` to check if an `unknown` value is included\n\treturn (states as unknown[]).includes(val);\n}\n","import { ScrollAppearState } from './ScrollAppearState.js';\nimport { ScrollAppearItem } from './ScrollAppearItem.js';\n\nexport class ScrollAppearQueue {\n\t#items: ScrollAppearItem[];\n\t#timeout: ReturnType<typeof setTimeout> | null;\n\t#delayRemovalTimeout: ReturnType<typeof setTimeout> | null;\n\t#lastItemDelay: number;\n\n\tconstructor() {\n\t\tthis.#items = [];\n\t\tthis.#timeout = null;\n\t\tthis.#delayRemovalTimeout = null;\n\t\tthis.#lastItemDelay = 0;\n\t}\n\n\t/**\n\t * Add a new item to the end of the queue if it's not in there already\n\t */\n\tpush(item: ScrollAppearItem): void {\n\t\tif (this.#isInQueue(item)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the item is hidden, add it to the queue and schedule its appearance\n\t\tif (item.getState() === ScrollAppearState.HIDDEN) {\n\t\t\tthis.#items.push(item);\n\t\t\tthis.#scheduleAppearance();\n\t\t}\n\t}\n\n\t/**\n\t * Immediately show any items that have left the viewport\n\t */\n\tcatchUp(): void {\n\t\tfor (let i = 0; i < this.#items.length; i++) {\n\t\t\tconst item = this.#items[i];\n\n\t\t\tif (item.isInViewport() === false) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t// If the first item should appepar, make it appear like normal\n\t\t\t\t\tthis.#appearFirstItem();\n\t\t\t\t} else {\n\t\t\t\t\t// If a later item should appear immediately, remove it from\n\t\t\t\t\t// the queue and make it appear immediately\n\t\t\t\t\tthis.#items.splice(i, 1);\n\t\t\t\t\titem.appear();\n\t\t\t\t}\n\n\t\t\t\t// Either way, the item was removed from the list,\n\t\t\t\t// so decrement `i` to make sure we don't miss an item\n\t\t\t\ti -= 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if an item is already in the queue\n\t */\n\t#isInQueue(item: ScrollAppearItem): boolean {\n\t\tconst inQueue = this.#items.includes(item);\n\n\t\treturn inQueue;\n\t}\n\n\t/**\n\t * Schedule the appearance of the first item in the queue\n\t */\n\t#scheduleAppearance(): void {\n\t\t// If the queue is empty, remove any delay for the next appearance\n\t\tif (this.#items.length === 0) {\n\t\t\tthis.#delayRemovalTimeout = setTimeout(() => {\n\t\t\t\tthis.#lastItemDelay = 0;\n\t\t\t\tthis.#delayRemovalTimeout = null;\n\t\t\t}, this.#lastItemDelay);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the next item is already scheduled to appear, do nothing\n\t\tif (this.#timeout !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#timeout = setTimeout(() => this.#appearFirstItem(), this.#lastItemDelay);\n\t}\n\n\t/**\n\t * Make the first item in the queue appear\n\t */\n\t#appearFirstItem(): void {\n\t\t// If we were waiting to remove the delay for the next item,\n\t\t// stop because it's no longer relevant\n\t\tif (this.#delayRemovalTimeout) {\n\t\t\tclearTimeout(this.#delayRemovalTimeout);\n\t\t\tthis.#delayRemovalTimeout = null;\n\t\t}\n\n\t\t// If we were waiting to display the next item,\n\t\t// stop because it's happening now\n\t\tif (this.#timeout) {\n\t\t\tclearTimeout(this.#timeout);\n\t\t}\n\t\tthis.#timeout = null;\n\n\t\tlet firstItem = this.#items.shift();\n\n\t\t// If the first item has appeared already, try the next one\n\t\twhile (firstItem?.getState() === ScrollAppearState.VISIBLE) {\n\t\t\tfirstItem = this.#items.shift();\n\t\t}\n\n\t\tif (firstItem) {\n\t\t\tfirstItem.appear();\n\t\t\tthis.#lastItemDelay = firstItem.delay;\n\t\t\tthis.#scheduleAppearance();\n\t\t}\n\t}\n}\n","import { ScrollAppearQueue } from './ScrollAppearQueue.js';\n\nconst queues: Map<Document | Element | string, ScrollAppearQueue> = new Map();\n\nconst globalQueue = new ScrollAppearQueue();\nqueues.set(document, globalQueue);\n\nexport function getQueue(identifier: Document | Element | string = document): ScrollAppearQueue {\n\tconst queue = queues.get(identifier) || new ScrollAppearQueue();\n\n\tif (queues.has(identifier) === false) {\n\t\tqueues.set(identifier, queue);\n\t}\n\n\treturn queue;\n}\n\nexport function getAllQueues(): ScrollAppearQueue[] {\n\tconst allQueues: ScrollAppearQueue[] = [];\n\n\tfor (const map of queues.values()) {\n\t\tallQueues.push(map);\n\t}\n\n\treturn allQueues;\n}\n","import { isScrollAppearState } from './ScrollAppearState.js';\nimport {\n\tselectors,\n\tattributes,\n} from './domMap.js';\nimport { ScrollAppearState } from './ScrollAppearState.js';\n\nimport { getQueue } from './queues.js';\nimport { ScrollAppearQueue } from './ScrollAppearQueue.js';\n\n/**\n * This `Map` is used to store each `ScrollAppearItem` created against\n * the `Element` used to instantiate it, so we can ensure no `Element`\n * ever has more than one `ScrollAppearItem` created for it.\n */\nconst scrollAppearItems: Map<Element, ScrollAppearItem> = new Map();\n\n/**\n * Create or retrieve a `ScrollAppearItem` for a specified `Element`.\n * This function should be used in place of the `ScrollAppearItem` constructor,\n * because this class uses a singleton-like pattern to ensure each `Element`\n * can only have a single `ScrollAppearItem` created for it.\n */\nexport function getScrollAppearItem($element: Element): ScrollAppearItem {\n\treturn scrollAppearItems.get($element) || new ScrollAppearItem($element);\n}\n\nclass ScrollAppearItem {\n\t#$element: Element;\n\t#$queue: ScrollAppearQueue;\n\t#delay: number;\n\n\tconstructor($element: Element) {\n\t\tif (scrollAppearItems.has($element)) {\n\t\t\tthrow new Error('Cannot create a second `ScrollAppearItem` for the same `Element`');\n\t\t} else {\n\t\t\tscrollAppearItems.set($element, this);\n\t\t}\n\n\t\tthis.#$element = $element;\n\t\tthis.#$queue = this.#findQueue();\n\t\tthis.#delay = Number($element.getAttribute(attributes.delay)) || 0;\n\n\t\tif (this.getState() === ScrollAppearState.UNINITIALISED) {\n\t\t\tthis.#setState(ScrollAppearState.HIDDEN);\n\t\t}\n\n\t\t// Make this item appear as soon as it or any of its descendents receive focus\n\t\tthis.#$element.addEventListener('focusin', () => this.appear(), { once: true });\n\t}\n\n\tget delay(): number {\n\t\treturn this.#delay;\n\t}\n\n\t/**\n\t * Checks if a `ScrollAppearItem`'s `Element` is in the viewport.\n\t * Only checks vertical boundaries, not horizontal.\n\t */\n\tisInViewport(threshold: number = 0): boolean {\n\t\tconst windowHeight = window.innerHeight;\n\t\tconst maxThreshold = (windowHeight / 2) - 50;\n\t\tif (threshold > maxThreshold) {\n\t\t\tthreshold = maxThreshold;\n\t\t}\n\n\t\tconst coords = this.#$element.getBoundingClientRect();\n\n\t\tconst viewportHeight = window.innerHeight || document.documentElement.clientWidth;\n\t\tconst viewportTop = threshold;\n\t\tconst viewportBottom = viewportHeight - threshold;\n\n\t\t// Is the bottom of the element below the top of the viewport?\n\t\tconst belowTop = coords.bottom >= viewportTop;\n\n\t\t// Is the top of the element above the bottom of the viewport?\n\t\tconst aboveBottom = coords.top <= viewportBottom;\n\n\t\tconst inViewport = belowTop && aboveBottom;\n\n\t\treturn inViewport;\n\t}\n\n\t/**\n\t * Make an element appear\n\t */\n\tappear(): void {\n\t\tthis.#setState(ScrollAppearState.VISIBLE);\n\t}\n\n\t/**\n\t * Update the DOM to reflect a new `ScrollAppearState`\n\t */\n\t#setState(state: ScrollAppearState): void {\n\t\tthis.#$element.setAttribute(attributes.state, state);\n\t}\n\n\t/**\n\t * Query the DOM to retrieve the current `ScrollAppearState`\n\t */\n\tgetState(): ScrollAppearState {\n\t\tconst state = this.#$element.getAttribute(attributes.state);\n\n\t\tif (isScrollAppearState(state)) {\n\t\t\treturn state;\n\t\t} else {\n\t\t\treturn ScrollAppearState.UNINITIALISED;\n\t\t}\n\t}\n\n\t/**\n\t * Find an item's appropriate `ScrollAppearQueue`\n\t */\n\t#findQueue(): ScrollAppearQueue {\n\t\t// First, check if the queue ID is specified via an attribute\n\t\tconst queueId = this.#$element.getAttribute(attributes.queue);\n\t\tif (queueId) {\n\t\t\treturn getQueue(queueId);\n\t\t}\n\n\t\t// Then, check if the item is inside a container\n\t\tconst $container = this.#$element.closest(selectors.container);\n\t\tif ($container) {\n\t\t\treturn getQueue($container);\n\t\t}\n\n\t\t// Otherwise, return the default queue\n\t\treturn getQueue();\n\t}\n\n\t/**\n\t * Find an item's appropriate queue and add it\n\t */\n\tqueue(): void {\n\t\tthis.#$queue.push(this);\n\t}\n}\n\n// This pattern allows the type of `ScrollAppearItem` to be exported\n// without also exporting its constructor\ntype ScrollAppearItemType = InstanceType<typeof ScrollAppearItem>;\nexport { ScrollAppearItemType as ScrollAppearItem };\n","import { throttle } from '@cipscis/throttle';\nimport { debounce } from '@cipscis/debounce';\n\nimport passiveSupported from './eventListenerPassiveSupport.js';\n\nimport { selectors } from './domMap.js';\nimport { ScrollAppearState } from './ScrollAppearState.js';\n\nimport { getScrollAppearItem } from './ScrollAppearItem.js';\nimport { getAllQueues } from './queues.js';\n\n// TODO: Improve initialisation/default styles so there is never an initial flash, without compromising no-js functionality\n\n/** (milliseconds) Throttle/debounce delay for scroll and resize events */\nconst delay = 100;\n\n/**\n * Initialise ScrollAppear for a particular set of elements\n */\nexport function init($container: Element | Document = document): void {\n\t_initElements($container);\n\n\t_initEvents();\n}\n\n/**\n * Find all scroll appear elements and initialise them. Then, show any elements within the viewport\n */\nfunction _initElements($container: Element | Document = document): void {\n\tconst $elements = Array.from($container.querySelectorAll(selectors.item));\n\n\t$elements.forEach(_initElement);\n\n\t_queueElementsInViewport();\n}\n\n/**\n * Create a `ScrollAppearItem` for an `Element`, letting its constructor perform the necessary initialisation.\n * We can retrieve the same `ScrollAppearItem` later, so we don't need to remember it now.\n */\nfunction _initElement($element: Element): void {\n\tgetScrollAppearItem($element);\n}\n\n/**\n * Show elements in the viewport any time the viewport changes through\n * scrolling or resizing.\n */\nfunction _initEvents(): void {\n\tconst passiveOptions = passiveSupported ? { passive: true } : true;\n\n\t// TODO: Bind events in a way that prevents a single scroll or resize event from firing the handler twice\n\tconst throttledShow = throttle(_queueElementsInViewport, delay);\n\tconst debouncedShow = debounce(_queueElementsInViewport, delay);\n\n\twindow.addEventListener('scroll', throttledShow, passiveOptions);\n\twindow.addEventListener('scroll', debouncedShow, passiveOptions);\n\n\twindow.addEventListener('resize', throttledShow, passiveOptions);\n\twindow.addEventListener('resize', debouncedShow, passiveOptions);\n\n\tconst throttledCatchUp = throttle(_catchUpQueue, delay);\n\tconst debouncedCatchUp = debounce(_catchUpQueue, delay);\n\n\twindow.addEventListener('scroll', throttledCatchUp, passiveOptions);\n\twindow.addEventListener('scroll', debouncedCatchUp, passiveOptions);\n\n\twindow.addEventListener('resize', throttledCatchUp, passiveOptions);\n\twindow.addEventListener('resize', debouncedCatchUp, passiveOptions);\n}\n\n/**\n * Add all hidden elements in the viewport to the queue\n */\nfunction _queueElementsInViewport(): void {\n\tconst $elements = Array.from(document.querySelectorAll(selectors.item));\n\tconst items = $elements.map(getScrollAppearItem);\n\tconst hiddenItems = items.filter((item) => item.getState() === ScrollAppearState.HIDDEN);\n\n\tconst hiddenItemsInViewport = hiddenItems.filter((item) => item.isInViewport());\n\n\thiddenItemsInViewport.forEach((item) => item.queue());\n}\n\n/**\n * Tell the queues to \"catch up\" with the viewport\n */\nfunction _catchUpQueue(): void {\n\tconst queues = getAllQueues();\n\n\tfor (const queue of queues) {\n\t\tqueue.catchUp();\n\t}\n}\n","import { init } from '@cipscis/scroll-appear';\n\ninit();\n"],"names":["throttle","fn","delay","timeout","args","returnVal","apply","this","setTimeout","undefined","debounce","promise","res","scheduleResolution","resolve","clearTimeout","Promise","reject","passiveSupported","options","passive","noop","window","addEventListener","removeEventListener","e","selectors","attributes","ScrollAppearState","ScrollAppearQueue","constructor","push","item","getState","HIDDEN","catchUp","i","length","isInViewport","splice","appear","includes","firstItem","shift","VISIBLE","queues","Map","globalQueue","getQueue","identifier","document","queue","get","has","set","getAllQueues","allQueues","map","values","scrollAppearItems","getScrollAppearItem","$element","ScrollAppearItem","Error","Number","getAttribute","UNINITIALISED","once","threshold","maxThreshold","innerHeight","coords","getBoundingClientRect","viewportTop","viewportBottom","documentElement","clientWidth","belowTop","bottom","aboveBottom","top","state","setAttribute","val","Object","queueId","$container","closest","_initElement","_queueElementsInViewport","Array","from","querySelectorAll","filter","forEach","_catchUpQueue","_initElements","passiveOptions","throttledShow","debouncedShow","throttledCatchUp","debouncedCatchUp","_initEvents","init"],"sourceRoot":""}