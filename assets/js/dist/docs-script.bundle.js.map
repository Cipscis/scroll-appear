{"version":3,"file":"docs-script.bundle.js","mappings":"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","sources":["webpack://@cipscis/scroll-appear/./node_modules/@cipscis/throttle/dist/throttle.js","webpack://@cipscis/scroll-appear/./node_modules/@cipscis/debounce/dist/debounce.js","webpack://@cipscis/scroll-appear/./src/eventListenerPassiveSupport.ts","webpack://@cipscis/scroll-appear/./src/constants.ts","webpack://@cipscis/scroll-appear/./src/ScrollAppearItem.ts","webpack://@cipscis/scroll-appear/./src/viewport.ts","webpack://@cipscis/scroll-appear/./src/scroll-appear.ts","webpack://@cipscis/scroll-appear/./src/ScrollAppearQueue.ts","webpack://@cipscis/scroll-appear/./docs/assets/js/src/docs-script.ts"],"sourcesContent":["/**\r\n * Create a version of fn that will only execute if it\r\n * hasn't been called successfully within the last delay ms\r\n *\r\n * @param {Function} fn - A function to throttle\r\n * @param {number} delay - The duration to wait before the function can be called again (ms)\r\n */\r\nconst throttle = function (fn, delay) {\r\n    // Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\r\n    let timeout;\r\n    return function (...args) {\r\n        if (!timeout) {\r\n            const returnVal = fn.apply(this, args);\r\n            timeout = setTimeout(() => {\r\n                timeout = undefined;\r\n            }, delay);\r\n            return returnVal;\r\n        }\r\n    };\r\n};\r\nexport { throttle };\r\nexport default throttle;\r\n//# sourceMappingURL=throttle.js.map","/**\r\n * Create a version of fn that will execute only after\r\n * no attempt to call it has been made for delay ms.\r\n * The debounced function returns a Promise that\r\n * resolves to the value returned by fn.\r\n *\r\n * Note that this will uncouple the callback from user\r\n * input, if used as an event callback. This can cause\r\n * browsers to attempt to block certain behaviour.\r\n *\r\n * This throttling is useful, for example, for waiting until\r\n * the user has stopped typing before executing a keyup callback.\r\n *\r\n * @param {Function} fn - A function to debounce\r\n * @param {number} delay - The duration to wait before calling the function (ms)\r\n */\r\nconst debounce = function (fn, delay) {\r\n    // Keep track of the timeout, Promise, and the Promise's resolver across multiple calls\r\n    // This lets later calls in the same queue know about the previous call,\r\n    // to cancel its timeout and use the same promise and resolution\r\n    // Use ReturnType<typeof setTimeout> for support across ES and NodeJS environments\r\n    let timeout;\r\n    let promise;\r\n    let res;\r\n    return function (...args) {\r\n        const scheduleResolution = (resolve) => {\r\n            if (timeout) {\r\n                clearTimeout(timeout);\r\n            }\r\n            timeout = setTimeout(() => {\r\n                timeout = undefined;\r\n                promise = undefined;\r\n                res = undefined;\r\n                resolve(fn.apply(this, args));\r\n            }, delay);\r\n        };\r\n        if (res) {\r\n            scheduleResolution(res);\r\n        }\r\n        else {\r\n            promise = new Promise((resolve, reject) => {\r\n                res = resolve;\r\n                scheduleResolution(res);\r\n            });\r\n        }\r\n        // There is no type guard for promise on the `if (res)` path,\r\n        // but if res is not undefined, then neither is promise\r\n        return promise;\r\n    };\r\n};\r\nexport { debounce };\r\nexport default debounce;\r\n//# sourceMappingURL=debounce.js.map","/**\n * Some older browsers don't support passing an options object to `addEventListener`,\n * instead expecting a booolean value to tell them if the event is passive. To detect\n * how the current browser expects to tell if an event is passive, temporarily bind\n * a dummy event that passes an object with a getter in its `passive` property so we\n * can detect if the browser tried to access it.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#safely_detecting_option_support\n */\nlet passiveSupported = false;\ntry {\n\tconst options = {\n\t\tget passive() {\n\t\t\tpassiveSupported = true;\n\t\t\treturn false;\n\t\t},\n\t} as EventListenerOptions;\n\n\tconst noop = () => {};\n\n\twindow.addEventListener('test', noop, options);\n\twindow.removeEventListener('test', noop);\n} catch (e) {\n\tpassiveSupported = false;\n}\n\nexport default passiveSupported;\n","export enum ScrollAppearState {\n\tUNINITIALISED = 'uninitialised',\n\tHIDDEN = 'hidden',\n\tVISIBLE = 'visible',\n}\n\nexport function isScrollAppearState(val: unknown): val is ScrollAppearState {\n\tconst states = Object.values(ScrollAppearState);\n\n\t// Use `as unknown[]` so TypeScript doesn't complain about using\n\t// `Array.prototype.includes` to check if an `unknown` value is included\n\treturn (states as unknown[]).includes(val);\n}\n\nexport const dataAttributes = {\n\tstate: 'data-scroll-appear-state',\n\tdelay: 'data-scroll-appear-delay',\n} as const;\n\nexport const selectors = {\n\tuninitialised: `.js-scroll-appear:not([${dataAttributes.state}])`,\n\thidden: `.js-scroll-appear[${dataAttributes.state}=\"${ScrollAppearState.HIDDEN}\"]`,\n\tvisible: `.js-scroll-appear[${dataAttributes.state}=\"${ScrollAppearState.VISIBLE}\"]`,\n} as const;\n","import {\n\tScrollAppearState,\n\tisScrollAppearState,\n\n\tdataAttributes,\n} from './constants.js';\n\nimport { isElementInViewport } from './viewport.js';\n\n/**\n * This `Map` is used to store each `ScrollAppearItem` created against\n * the `Element` used to instantiate it, so we can ensure no `Element`\n * ever has more than one `ScrollAppearItem` created for it.\n */\nconst scrollAppearItems: Map<Element, ScrollAppearItem> = new Map();\n\n/**\n * Create or retrieve a `ScrollAppearItem` for a specified `Element`.\n * This function should be used in place of the `ScrollAppearItem` constructor,\n * because this class uses a singleton-like pattern to ensure each `Element`\n * can only have a single `ScrollAppearItem` created for it.\n */\nexport function getScrollAppearItem($element: Element): ScrollAppearItem {\n\treturn scrollAppearItems.get($element) || new ScrollAppearItem($element);\n}\n\nclass ScrollAppearItem {\n\t#$element: Element;\n\tdelay: number;\n\n\tconstructor($element: Element) {\n\t\tif (scrollAppearItems.has($element)) {\n\t\t\tthrow new Error('Cannot create a second `ScrollAppearItem` for the same `Element`');\n\t\t} else {\n\t\t\tscrollAppearItems.set($element, this);\n\t\t}\n\n\t\tthis.#$element = $element;\n\t\tthis.delay = Number($element.getAttribute(dataAttributes.delay)) || 0;\n\n\t\tif (this.getState() === ScrollAppearState.UNINITIALISED) {\n\t\t\tthis.#setState(ScrollAppearState.HIDDEN);\n\t\t}\n\t}\n\n\tisInViewport(): boolean {\n\t\treturn isElementInViewport(this.#$element);\n\t}\n\n\tappear(): void {\n\t\tthis.#setState(ScrollAppearState.VISIBLE);\n\t}\n\n\t#setState(state: ScrollAppearState): void {\n\t\tthis.#$element.setAttribute(dataAttributes.state, state);\n\t}\n\n\tgetState(): ScrollAppearState {\n\t\tconst state = this.#$element.getAttribute(dataAttributes.state);\n\n\t\tif (isScrollAppearState(state)) {\n\t\t\treturn state;\n\t\t} else {\n\t\t\treturn ScrollAppearState.UNINITIALISED;\n\t\t}\n\t}\n}\n\n// This pattern allows the type of `ScrollAppearItem` to be exported\n// without also exporting its constructor\ntype ScrollAppearItemType = InstanceType<typeof ScrollAppearItem>;\nexport { ScrollAppearItemType as ScrollAppearItem };\n","/**\n * Checks if an Element is in the viewport. Only checks vertical boundaries, not horizontal.\n */\nexport function isElementInViewport($element: Element, threshold: number = 0): boolean {\n\tconst windowHeight = window.innerHeight;\n\tconst maxThreshold = (windowHeight / 2) - 50;\n\tif (threshold > maxThreshold) {\n\t\tthreshold = maxThreshold;\n\t}\n\n\tconst coords = $element.getBoundingClientRect();\n\n\tconst viewportHeight = window.innerHeight || document.documentElement.clientWidth;\n\tconst viewportTop = threshold;\n\tconst viewportBottom = viewportHeight - threshold;\n\n\t// Is the bottom of the element below the top of the viewport?\n\tconst belowTop = coords.bottom >= viewportTop;\n\n\t// Is the top of the element above the bottom of the viewport?\n\tconst aboveBottom = coords.top <= viewportBottom;\n\n\tconst inViewport = belowTop && aboveBottom;\n\n\treturn inViewport;\n}\n","import { throttle } from '@cipscis/throttle';\nimport { debounce } from '@cipscis/debounce';\n\nimport passiveSupported from './eventListenerPassiveSupport.js';\n\nimport { selectors } from './constants.js';\n\nimport { getScrollAppearItem } from './ScrollAppearItem.js';\nimport { ScrollAppearQueue } from './ScrollAppearQueue.js';\n\n// TODO: Improve initialisation/default styles so there is never an initial flash, without compromising no-js functionality\n\n/** (milliseconds) Throttle/debounce delay for scroll and resize events */\nconst delay = 100;\n\nconst queue = new ScrollAppearQueue();\n\n/**\n * Initialise ScrollAppear for a particular set of elements\n */\nexport function init($container: Element | Document = document): void {\n\t_initElements($container);\n\n\t_initEvents();\n}\n\n/**\n * Find all scroll appear elements and initialise them. Then, show any elements within the viewport\n */\nfunction _initElements($container: Element | Document = document): void {\n\tconst $uninitialisedElements = Array.from($container.querySelectorAll(selectors.uninitialised));\n\n\t$uninitialisedElements.forEach(_initElement);\n\n\t_queueElementsInViewport();\n}\n\n/**\n * Create a `ScrollAppearItem` for an `Element`, letting its constructor perform the necessary initialisation.\n * We can retrieve the same `ScrollAppearItem` later, so we don't need to remember it now.\n */\nfunction _initElement($element: Element): void {\n\tgetScrollAppearItem($element);\n}\n\n/**\n * Show elements in the viewport any time the viewport changes through\n * scrolling or resizing.\n */\nfunction _initEvents(): void {\n\tconst passiveOptions = passiveSupported ? { passive: true } : true;\n\n\tconst throttledShow = throttle(_queueElementsInViewport, delay);\n\tconst debouncedShow = debounce(_queueElementsInViewport, delay);\n\n\twindow.addEventListener('scroll', throttledShow, passiveOptions);\n\twindow.addEventListener('scroll', debouncedShow, passiveOptions);\n\n\twindow.addEventListener('resize', throttledShow, passiveOptions);\n\twindow.addEventListener('resize', debouncedShow, passiveOptions);\n\n\tconst throttledCatchUp = throttle(_catchUpQueue, delay);\n\tconst debouncedCatchUp = debounce(_catchUpQueue, delay);\n\n\twindow.addEventListener('scroll', throttledCatchUp, passiveOptions);\n\twindow.addEventListener('scroll', debouncedCatchUp, passiveOptions);\n\n\twindow.addEventListener('resize', throttledCatchUp, passiveOptions);\n\twindow.addEventListener('resize', debouncedCatchUp, passiveOptions);\n}\n\n/**\n * Add all hidden elements in the viewport to the queue\n */\nfunction _queueElementsInViewport(): void {\n\tconst $hiddenElements = Array.from(document.querySelectorAll(selectors.hidden));\n\tconst hiddenItems = $hiddenElements.map(getScrollAppearItem);\n\n\tconst hiddenItemsInViewport = hiddenItems.filter((item) => item.isInViewport());\n\n\thiddenItemsInViewport.forEach((item) => queue.push(item));\n}\n\n/**\n * Tell the queue to \"catch up\" with the viewport\n */\nfunction _catchUpQueue(): void {\n\tqueue.catchUp();\n}\n","import { ScrollAppearState } from './constants.js';\nimport { ScrollAppearItem } from './ScrollAppearItem.js';\n\n// TODO: Make the first item appear immediately, so its delay affects the item after it instead\n// TODO: Allow for multiple queues, based either on an ID in a data attribute or a containing element\n\nexport class ScrollAppearQueue {\n\titems: ScrollAppearItem[];\n\ttimeout: ReturnType<typeof setTimeout> | null;\n\n\tconstructor() {\n\t\tthis.items = [];\n\t\tthis.timeout = null;\n\t}\n\n\t/**\n\t * Add a new item to the end of the queue if it's not in there already\n\t */\n\tpush(item: ScrollAppearItem): void {\n\t\tif (this.#isInQueue(item)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the item is hidden, add it to the queue and schedule its appearance\n\t\tif (item.getState() === ScrollAppearState.HIDDEN) {\n\t\t\tthis.items.push(item);\n\t\t\tthis.#scheduleAppearance();\n\t\t}\n\t}\n\n\t/**\n\t * Immediately show any items that have left the viewport\n\t */\n\tcatchUp(): void {\n\t\tfor (const [i, item] of this.items.entries()) {\n\t\t\tif (item.isInViewport() === false) {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\t// If the first item should appear, make it appear like normal\n\t\t\t\t\tthis.#appearFirstItem();\n\t\t\t\t} else {\n\t\t\t\t\t// If a later item should appear immediately, remove it from\n\t\t\t\t\t// the queue and make it appear immediately\n\t\t\t\t\tthis.items.splice(i, 1);\n\t\t\t\t\titem.appear();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if an item is already in the queue\n\t */\n\t#isInQueue(item: ScrollAppearItem): boolean {\n\t\tconst inQueue = this.items.find((queueItem) => queueItem === item);\n\n\t\treturn !!inQueue;\n\t}\n\n\t/**\n\t * Schedule the appearance of the first item in the queue\n\t */\n\t#scheduleAppearance(): void {\n\t\tconst nextItem = this.items[0];\n\n\t\tif (nextItem && this.timeout === null) {\n\t\t\tthis.timeout = setTimeout(() => this.#appearFirstItem(), nextItem.delay);\n\t\t}\n\t}\n\n\t/**\n\t * Make the first item in the queue appear\n\t */\n\t#appearFirstItem(): void {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t}\n\t\tthis.timeout = null;\n\n\t\tconst nextItem = this.items.shift();\n\n\t\tif (nextItem) {\n\t\t\tnextItem.appear();\n\t\t\tthis.#scheduleAppearance();\n\t\t}\n\t}\n}\n","import { init } from '@cipscis/scroll-appear';\n\ninit();\n"],"names":["throttle","fn","delay","timeout","args","returnVal","apply","this","setTimeout","undefined","debounce","promise","res","scheduleResolution","resolve","clearTimeout","Promise","reject","passiveSupported","options","passive","noop","window","addEventListener","removeEventListener","e","ScrollAppearState","dataAttributes","selectors","uninitialised","hidden","HIDDEN","visible","VISIBLE","scrollAppearItems","Map","getScrollAppearItem","$element","get","ScrollAppearItem","constructor","has","Error","set","Number","getAttribute","getState","UNINITIALISED","isInViewport","threshold","maxThreshold","innerHeight","coords","getBoundingClientRect","viewportTop","viewportBottom","document","documentElement","clientWidth","belowTop","bottom","aboveBottom","top","isElementInViewport","appear","state","setAttribute","val","Object","values","includes","queue","items","push","item","catchUp","i","entries","splice","find","queueItem","nextItem","shift","_initElement","_queueElementsInViewport","Array","from","querySelectorAll","map","filter","forEach","_catchUpQueue","$container","_initElements","passiveOptions","throttledShow","debouncedShow","throttledCatchUp","debouncedCatchUp","_initEvents","init"],"sourceRoot":""}